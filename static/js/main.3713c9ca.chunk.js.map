{"version":3,"sources":["counter.module.css","Display.js","Input.js","Button.js","reducer.js","Counter1.js","Counter2.js","App.js","serviceWorker.js","store.js","index.js","counter2.module.css"],"names":["module","exports","Display","render","styleError","props","maxValue","minValue","style","error","styleMaxError","counter","className","display","onSet","enter","React","Component","Input","title","type","value","autoFocus","onChange","Button","onClick","disabled","initialState","onShow","addMaxValueAC","newMaxValue","status","addMinValueAC","newMinValue","addCounterAC","resetCounterAC","reducer","state","action","Counter1","addMaxValue","e","Number","currentTarget","addMinValue","setChange","addCounter","resetCounter","disabledAddButton","disabledResetButton","disabledSetButton","errorInput","input","settings","inputWrapper","displayWrapper","buttonWrapper","np","connect","dispatch","setChangeAC","Counter2","setChangeCounter","onSowSettings","setChangeCounterAC","onSowSettingsAC","App","onShowHandler","setState","Boolean","window","location","hostname","match","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3713c9ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter_counter__2sAHO\",\"error\":\"counter_error__1-TJX\",\"errorInput\":\"counter_errorInput__2-p4q\",\"input\":\"counter_input__2iUsA\",\"enter\":\"counter_enter__3S6K9\",\"display\":\"counter_display__2P-La\",\"settings\":\"counter_settings__2sLbP\",\"inputWrapper\":\"counter_inputWrapper__2EAcY\",\"displayWrapper\":\"counter_displayWrapper__2MYlI\",\"buttonWrapper\":\"counter_buttonWrapper__3naDH\",\"buttonSet\":\"counter_buttonSet__5J-6v\",\"buttonReset\":\"counter_buttonReset__2K1X3\"};","import React from 'react';\nimport './App.css';\nimport style from './counter.module.css'\n\nclass Display extends React.Component {\n\n    render = () => {\n\n        let styleError = this.props.maxValue < 0\n        || this.props.minValue < 0\n        || this.props.minValue >= this.props.maxValue ? style.error : '';\n\n        let styleMaxError = this.props.counter === this.props.maxValue ? style.error : ''\n\n        return (\n            <div className={style.display}>\n                <span className={styleMaxError}>\n                    {\n                        (this.props.maxValue < 0 || this.props.minValue < 0 || this.props.minValue >= this.props.maxValue)\n                            ? <span  className={styleError}>incorrect value!!!</span>\n                            : (!this.props.onSet)\n                            ? <span className={style.enter}>Enter value end press set</span>\n                            : <span>{this.props.counter}</span>\n                    }\n                </span>\n            </div>\n        );\n    }\n}\n\n\nexport default Display;\n","import React from 'react';\nimport './App.css';\nimport style from './counter.module.css'\n\nclass Input extends React.Component {\n    render = () => {\n        return (\n            <div>\n                <span>{this.props.title}</span>\n                <input\n                    type='number'\n                    value={this.props.value}\n                    autoFocus={true}\n                    onChange={this.props.onChange}\n                    className={this.props.className}\n                />\n            </div>\n        );\n    }\n}\n\n\nexport default Input;\n","import React from 'react';\nimport './App.css';\nimport style from './counter.module.css'\n\nclass Button extends React.Component {\n    render = () => {\n        return (\n            <button\n                onClick={this.props.onClick}\n                disabled={this.props.disabled}\n            >{this.props.title}</button>\n        );\n    }\n}\n\n\nexport default Button;\n","export const ADD_MAX_VALUE = \"ADD_MAX_VALUE\";\r\nexport const  ADD_MIN_VALUE =  \"ADD_MIN_VALUE\";\r\nexport const  SET_CHANGE =  \"SET_CHANGE\";\r\nexport const  SET_CHANGE_2 =  \"SET_CHANGE_2\";\r\nexport const ADD_COUNTER = \"ADD_COUNTER\";\r\nexport const RESET_COUNTER = \"RESET_COUNTER\";\r\nexport const  ON_SHOW_SETTINGS = \"ON_SHOW_SETTINGS\";\r\n\r\nexport const initialState = {\r\n    counter: 0,\r\n    maxValue: 5,\r\n    minValue: 0,\r\n    onSet: false,\r\n    onShow: false\r\n\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue,\r\n                onSet: action.onSet\r\n            };\r\n\r\n        case ADD_MIN_VALUE:\r\n            return {\r\n                ...state,\r\n                minValue: action.minValue,\r\n                onSet: action.onSet\r\n            };\r\n\r\n        case SET_CHANGE:\r\n            return {\r\n                ...state,\r\n                counter: action.counter,\r\n                onSet: action.onSet,\r\n                onShow: action.onShow\r\n            };\r\n\r\n        case ADD_COUNTER:\r\n            return {\r\n                ...state,\r\n                counter: action.counter\r\n            };\r\n        case RESET_COUNTER:\r\n            return {\r\n                ...state,\r\n                counter: action.counter\r\n            };\r\n        case ON_SHOW_SETTINGS:\r\n            return {\r\n                ...state,\r\n                onShow: action.onShow\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\nexport const addMaxValueAC = (newMaxValue, status) => {\r\n    return {\r\n        type: ADD_MAX_VALUE,\r\n        maxValue: newMaxValue,\r\n        onSet: status\r\n    }\r\n};\r\n\r\nexport const addMinValueAC = (newMinValue, status)=>{\r\n    return {\r\n        type: ADD_MIN_VALUE,\r\n        minValue: newMinValue,\r\n        onSet: status\r\n    }\r\n};\r\n\r\nexport const setChangeAC = (counter, onSet)=> {\r\n    return  {\r\n        type: SET_CHANGE,\r\n        counter: counter,\r\n        onSet: onSet\r\n    }\r\n};\r\n\r\nexport  const  addCounterAC = (counter)=> {\r\n    return {\r\n        type: ADD_COUNTER,\r\n        counter: counter\r\n    }\r\n};\r\n\r\nexport const resetCounterAC = (counter)=> {\r\n    return {\r\n        type: RESET_COUNTER,\r\n        counter: counter\r\n    }\r\n};\r\n\r\nexport const setChangeCounterAC= (counter, onSet, onShow)=> {\r\n    return {\r\n        type: SET_CHANGE,\r\n        counter: counter,\r\n        onSet: onSet,\r\n        onShow: onShow\r\n    }\r\n};\r\n\r\nexport const onSowSettingsAC= (status)=> {\r\n    return {\r\n        type: ON_SHOW_SETTINGS,\r\n        onShow: status\r\n    }\r\n};\r\n\r\n\r\nexport default reducer\r\n","import React from 'react';\nimport './App.css';\nimport style from './counter.module.css'\nimport Display from \"./Display\";\nimport Input from \"./Input\";\nimport Button from \"./Button\";\nimport {connect} from \"react-redux\";\nimport {\n    ADD_COUNTER,\n    ADD_MAX_VALUE,\n    ADD_MIN_VALUE,\n    addCounterAC, addMaxValueAC, addMinValueAC,\n    RESET_COUNTER,\n    resetCounterAC,\n    SET_CHANGE, setChangeAC\n} from \"./reducer\";\n\n\nclass Counter1 extends React.Component {\n    // state = {\n    //     counter: 0,\n    //     maxValue: 5,\n    //     minValue: 0,\n    //     onSet: false,\n    //     onShow: false\n    // };\n\n    addMaxValue=(e)=>{\n        let newMaxValue=Number(e.currentTarget.value);\n        // this.setState({\n        //     maxValue: newMaxValue,\n        //     onSet: false\n        // })\n        this.props.addMaxValue(newMaxValue, false)\n    };\n\n    addMinValue=(e)=>{\n        let newMinValue = Number(e.currentTarget.value);\n        // this.setState({\n        //     minValue: newMinValue,\n        //     onSet: false\n        // })\n        this.props.addMinValue(newMinValue, false)\n    };\n\n    setChange = ()=>{\n        // this.setState({\n        //     counter: this.state.minValue,\n        //     onSet: true\n        // })\n        this.props.setChange(this.props.minValue, true)\n    };\n\n    addCounter = ()=>{\n        // if(this.state.counter<this.state.maxValue){\n        //     this.setState({counter: this.state.counter +1})\n        // }\n        if(this.props.counter<this.props.maxValue){\n            this.props.addCounter(this.props.counter + 1)\n        }\n    };\n\n    resetCounter = ()=>{\n        // this.setState({counter: this.state.minValue})\n        this.props.resetCounter(this.props.minValue)\n    };\n\n    render = () => {\n\n        let disabledAddButton = this.props.onSet===false || this.props.counter===this.props.maxValue;\n        let disabledResetButton = this.props.onSet===false || this.props.counter===this.props.minValue;\n        let disabledSetButton = this.props.onSet === true || this.props.maxValue < 0 || this.props.minValue < 0 || this.props.minValue>=this.props.maxValue;\n        let errorInput = this.props.minValue < 0\n            || this.props.maxValue < 0\n            || this.props.minValue >= this.props.maxValue ? style.errorInput : style.input;\n\n        return (\n            <div className={style.counter}>\n\n                <div className={style.settings}>\n                    <div className={style.inputWrapper} >\n                        <Input\n                            title={'MAX Value'}\n                            value={this.props.maxValue}\n                            onChange={this.addMaxValue}\n                            className={errorInput}\n                        />\n                        <Input\n                            title={'MIN Value'}\n                            value={this.props.minValue}\n                            onChange={this.addMinValue}\n                            className={errorInput}\n                        />\n                    </div>\n                    <Button\n                        title={'SET'}\n                        onClick={this.setChange}\n                        disabled={disabledSetButton}\n                    />\n                </div>\n\n                <div className={style.displayWrapper}>\n                    <Display\n                        counter={this.props.counter}\n                        maxValue={this.props.maxValue}\n                        minValue={this.props.minValue}\n                        onSet={this.props.onSet}\n                    />\n                    <div className={style.buttonWrapper}>\n                        <Button\n                            title={'ADD'}\n                            onClick={this.addCounter}\n                            disabled={disabledAddButton}np\n                        />\n                        <Button\n                            title={'RESET'}\n                            onClick={this.resetCounter}\n                            disabled={disabledResetButton}\n                        />\n                    </div>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    return(\n        {\n            counter: state.counter,\n            maxValue: state.maxValue,\n            minValue: state.minValue,\n            onSet: state.onSet,\n            onShow: state.onShow\n        }\n    )\n};\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        addMaxValue:(newMaxValue, status)=>{\n            // const action = {\n            //     type: ADD_MAX_VALUE,\n            //     maxValue: newMaxValue,\n            //     onSet: status\n            // };\n            const action = addMaxValueAC(newMaxValue, status);\n            dispatch(action)\n        },\n        addMinValue:(newMinValue, status)=>{\n            // const action={\n            //     type: ADD_MIN_VALUE,\n            //     minValue: newMinValue,\n            //     onSet: status\n            // };\n            const action = addMinValueAC (newMinValue, status);\n            dispatch(action)\n        },\n        setChange: (counter, onSet)=>{\n            // const action = {\n            //     type: SET_CHANGE,\n            //     counter: counter,\n            //     onSet: onSet\n            // };\n            const action = setChangeAC(counter, onSet);\n            dispatch(action)\n        },\n        addCounter: (counter)=>{\n            // const action = {\n            //     type: ADD_COUNTER,\n            //     counter: counter\n            // };\n            const action = addCounterAC(counter);\n            dispatch(action)\n        },\n\n        resetCounter: (counter)=>{\n            // const action={\n            //     type: RESET_COUNTER,\n            //     counter: counter\n            // };\n            const action = resetCounterAC(counter);\n            dispatch(action)\n        }\n    }\n};\n\nexport default connect (mapStateToProps, mapDispatchToProps) (Counter1);\n","import React from 'react';\nimport './App.css';\nimport style from './counter2.module.css'\nimport Display from \"./Display\";\nimport Input from \"./Input\";\nimport Button from \"./Button\";\nimport {\n    ADD_COUNTER,\n    ADD_MAX_VALUE,\n    ADD_MIN_VALUE, addCounterAC, addMaxValueAC, addMinValueAC,\n    ON_SHOW_SETTINGS,\n    onSowSettingsAC,\n    RESET_COUNTER, resetCounterAC,\n    SET_CHANGE, setChangeCounterAC\n} from \"./reducer\";\nimport {connect} from \"react-redux\";\n\nclass Counter2 extends React.Component {\n    // state = {\n    //     counter: 0,\n    //     maxValue: 5,\n    //     minValue: 0,\n    //     onSet: false,\n    //     onShow: false\n    // };\n\n    addMaxValue=(e)=>{\n        let newMaxValue=Number(e.currentTarget.value);\n        // this.setState({\n        //     maxValue: newMaxValue,\n        //     onSet: false\n        // })\n        this.props.addMaxValue(newMaxValue, false)\n    };\n\n    addMinValue=(e)=>{\n        let newMinValue = Number(e.currentTarget.value);\n        // this.setState({\n        //     minValue: newMinValue,\n        //     onSet: false\n        // })\n        this.props.addMinValue(newMinValue, false)\n    };\n\n    setChange = ()=>{\n        // this.setState({\n        //     counter: this.state.minValue,\n        //     onSet: true\n        // })\n        this.props.setChangeCounter(this.props.minValue, true, true)\n    };\n\n    addCounter = ()=>{\n        // if(this.state.counter<this.state.maxValue){\n        //     this.setState({counter: this.state.counter +1})\n        // }\n        if(this.props.counter<this.props.maxValue){\n            this.props.addCounter(this.props.counter + 1)\n        }\n    };\n\n    resetCounter = ()=>{\n        // this.setState({counter: this.state.minValue})\n        this.props.resetCounter(this.props.minValue)\n    };\n\n    onSowSettings = ()=>{\n        // this.setState({onShow: !this.state.onShow})\n        this.props.onSowSettings(!this.props.onShow)\n    };\n\n    render = () => {\n\n        let disabledAddButton = this.props.onSet===false || this.props.counter===this.props.maxValue;\n        let disabledResetButton = this.props.onSet===false || this.props.counter===this.props.minValue;\n        let disabledSetButton = this.props.onSet === true || this.props.maxValue < 0 || this.props.minValue < 0 || this.props.minValue>=this.props.maxValue;\n        let errorInput = this.props.minValue < 0\n            || this.props.maxValue < 0\n            || this.props.minValue >= this.props.maxValue ? style.errorInput : style.input;\n\n        return (\n            <div className={style.counter}>\n\n                {!this.props.onShow && <div className={style.settings}>\n                    <div className={style.inputWrapper}>\n                        <Input\n                            title={'MAX Value'}\n                            value={this.props.maxValue}\n                            onChange={this.addMaxValue}\n                            className={errorInput}\n                        />\n                        <Input\n                            title={'MIN Value'}\n                            value={this.props.minValue}\n                            onChange={this.addMinValue}\n                            className={errorInput}\n                        />\n                    </div>\n                    <Button\n                        title={'SET'}\n                        onClick={this.setChange}\n                        disabled={disabledSetButton}\n                    />\n                </div>}\n\n                {this.props.onShow && <div className={style.displayWrapper}>\n                    <Display\n                        counter={this.props.counter}\n                        maxValue={this.props.maxValue}\n                        minValue={this.props.minValue}\n                        onSet={this.props.onSet}\n                    />\n                    <div className={style.buttonWrapper}>\n                        <Button\n                            title={'ADD'}\n                            onClick={this.addCounter}\n                            disabled={disabledAddButton}\n                        />\n                        <Button\n                            title={'RESET'}\n                            onClick={this.resetCounter}\n                            disabled={disabledResetButton}\n                        />\n                        <Button\n                            title={'ONSET'}\n                            onClick={this.onSowSettings}\n                            disabled={false}\n                        />\n                    </div>\n                </div>}\n\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    return(\n        {\n            counter: state.counter,\n            maxValue: state.maxValue,\n            minValue: state.minValue,\n            onSet: state.onSet,\n            onShow: state.onShow\n        }\n    )\n};\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        addMaxValue:(newMaxValue, status)=>{\n            // const action = {\n            //     type: ADD_MAX_VALUE,\n            //     maxValue: newMaxValue,\n            //     onSet: status\n            // };\n            const action = addMaxValueAC(newMaxValue, status);\n            dispatch(action)\n        },\n\n        addMinValue:(newMinValue, status)=>{\n            // const action={\n            //     type: ADD_MIN_VALUE,\n            //     minValue: newMinValue,\n            //     onSet: status\n            // };\n            const action = addMinValueAC(newMinValue, status);\n            dispatch(action)\n        },\n\n        setChangeCounter: (counter, onSet, onShow)=>{\n            // const action = {\n            //     type: SET_CHANGE,\n            //     counter: counter,\n            //     onSet: onSet,\n            //     onShow: onShow\n            // };\n            const action=setChangeCounterAC(counter, onSet, onShow)\n            dispatch(action)\n        },\n\n        addCounter: (counter)=>{\n            // const action = {\n            //     type: ADD_COUNTER,\n            //     counter: counter\n            // };\n            const action = addCounterAC(counter);\n            dispatch(action)\n        },\n\n        resetCounter: (counter)=>{\n            // const action={\n            //     type: RESET_COUNTER,\n            //     counter: counter\n            // };\n            const action = resetCounterAC(counter);\n            dispatch(action)\n        },\n\n        onSowSettings: (status)=>{\n            // const action={\n            //     type: ON_SHOW_SETTINGS,\n            //     onShow: status\n            // };\n            const action = onSowSettingsAC(status);\n            dispatch(action)\n        }\n\n    }\n};\n\nexport default connect (mapStateToProps, mapDispatchToProps) (Counter2);\n\n","import React from 'react';\nimport './App.css';\nimport Counter1 from \"./Counter1\";\nimport Counter2 from \"./Counter2\";\n\n\nclass App extends React.Component {\n\n    state={\n        onShow: false\n    };\n    onShowHandler = ()=>{\n        this.setState({onShow:!this.state.onShow})\n    };\n\n  render = () => {\n\n    return (\n        <div className=\"App\">\n            <button onClick={this.onShowHandler} className='showButton'>select counter</button>\n            {this.state.onShow === true && <Counter1 />}\n            {this.state.onShow === false && <Counter2 />}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from './reducer'\r\n\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter2_counter__uI-XO\",\"error\":\"counter2_error__2A1Gh\",\"errorInput\":\"counter2_errorInput__1wfV7\",\"input\":\"counter2_input__2xttW\",\"settings\":\"counter2_settings__3_alk\",\"inputWrapper\":\"counter2_inputWrapper__-phfV\",\"displayWrapper\":\"counter2_displayWrapper__lcH0D\",\"buttonWrapper\":\"counter2_buttonWrapper__17R-i\",\"display\":\"counter2_display__UFhS-\"};"],"sourceRoot":""}